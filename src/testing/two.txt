import React, { useState } from "react";
import {
  Grid,
  Paper,
  Typography,
  Box,
  TextField,
  IconButton,
  Modal,
  Divider,
  Dialog,
  DialogTitle,
  DialogActions,
  DialogContent,
  Button,
} from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import EditIcon from "@mui/icons-material/Edit";
import CloseIcon from "@mui/icons-material/Close";
const columns = [
  { field: "nome", headerName: "Nome", width: 90 },
  {
    field: "cpf_cnpj",
    headerName: "CPF_CNPJ",
    width: 150,
    editable: true,
  },
  {
    field: "telefones",
    headerName: "Telefones",
    width: 150,
    editable: true,
  },
  {
    field: "opcoes",
    headerName: "Opções",

    width: 125,

    renderCell: cellValues => {
      return (
        <IconButton>
          <EditIcon />
        </IconButton>
      );
    },
  },
];

const rows = [
  { id: 1, nome: "Rômulo", cpf_cnpj: "678568765", telefones: 8466585765 },
  {
    id: 2,
    nome: "Júlio",
    cpf_cnpj: "346735252",
    telefones: 8466123465,
    opcoes: "s",
  },
  {
    id: 3,
    nome: "Jardel",
    cpf_cnpj: "457846846",
    telefones: 8412345765,
    opcoes: "s",
  },
];

// const style = {
//   position: "absolute",
//   top: "50%",
//   left: "50%",
//   transform: "translate(-50%, -50%)",
//   width: 400,
//   bgcolor: "background.paper",
//   border: "2px solid #000",
//   boxShadow: 24,
//   p: 4,
// };

export default function Fornecedores() {
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  return (
    <Grid
      container
      alignItems="center"
      justifyContent="center"
      style={{ minHeight: "80vh", marginTop: "40px" }}
      spacing={2}
      direction="column"
    >
      <Typography sx={{ marginTop: "25px" }} variant="h5">
        Fornecedores
      </Typography>
      <Grid item>
        <Grid container justifyContent="space-between" spacing={0}>
          <Grid item>
            <TextField id="outlined-basic" label="Filtrar" variant="outlined" />
          </Grid>
          <Grid item>
            <IconButton onClick={handleOpen} size="large">
              <AddCircleOutlineIcon fontSize="large" />
            </IconButton>
            <Dialog
              open={open}
              onClose={handleClose}
              aria-labelledby="responsive-dialog-title"
            >
              <DialogTitle id="responsive-dialog-title">
                <Grid container spacing={0} justifyContent="space-between">
                  <Grid item>{"Dados do Fornecedor"}</Grid>
                  <Grid item>
                    <IconButton onClick={() => setOpen(false)}>
                      <CloseIcon />
                    </IconButton>
                  </Grid>
                </Grid>
              </DialogTitle>
              <Divider />
              <Grid container spacing={0}>
                <Grid item>
                  <DialogContent>
                    <Grid container spacing={2}>
                      <Grid xs={4} item>
                        <TextField fullWidth label="CPF_CNPJ" variant="outlined" />
                      </Grid>
                      <Grid xs={8} item>
                        <TextField fullWidth label="Nome" variant="outlined" />
                      </Grid>
                      <Grid xs={10} item>
                        <TextField fullWidth label="Logradouro" variant="outlined" />
                      </Grid>
                      <Grid xs={2} item>
                        <TextField fullWidth label="N*" variant="outlined" />
                      </Grid>
                      <Grid xs={5} item>
                        <TextField fullWidth label="Bairro" variant="outlined" />
                      </Grid>
                      <Grid xs={5} item>
                        <TextField fullWidth label="Cidade" variant="outlined" />
                      </Grid>
                      <Grid xs={2} item>
                        <TextField fullWidth label="UF" variant="outlined" />
                      </Grid>
                      <Grid xs={6} item>
                        <TextField fullWidth label="Telefone" variant="outlined" />
                      </Grid>
                      <Grid xs={6} item>
                        <TextField fullWidth label="Telefone 2" variant="outlined" />
                      </Grid>

                      <Grid
                        sx={{ marginTop: "20px" }}
                        container
                        justifyContent="space-between"
                        spacing={0}
                      >
                        <Grid sx={{ marginLeft: "15px" }} item>
                          <Button color="error" variant="contained">
                            Excluir
                          </Button>
                        </Grid>
                        <Grid item>
                          <Button color="success" variant="contained">
                            Salvar
                          </Button>
                        </Grid>
                      </Grid>
                    </Grid>
                  </DialogContent>
                </Grid>
              </Grid>
            </Dialog>
          </Grid>
        </Grid>

        <Paper
          sx={{
            height: 400,
            width: "570px",
          }}
          elevation={2}
        >
          <DataGrid
            rows={rows}
            columns={columns}
            pageSize={5}
            rowsPerPageOptions={[5]}
            checkboxSelection
            disableSelectionOnClick
          />
        </Paper>
      </Grid>
    </Grid>
  );
}
import React, { useState } from "react";
import {
  Grid,
  Paper,
  Typography,
  Box,
  TextField,
  IconButton,
  FormControl,
  Select,
  InputLabel,
  MenuItem,
} from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import EditIcon from "@mui/icons-material/Edit";
import CloseIcon from "@mui/icons-material/Close";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
const columns = [
  { field: "fornecedor", headerName: "Fornecedor", width: 140 },
  {
    field: "descricao",
    headerName: "Descrição",
    width: 150,
    editable: true,
  },
  {
    field: "vencimento",
    headerName: "Vencimento",
    width: 150,
    editable: true,
    type: "date",
  },
  {
    field: "estado",
    headerName: "Estado",
    width: 120,
    editable: true,
  },
  {
    field: "opcoes",
    headerName: "Opções",

    width: 125,

    renderCell: cellValues => {
      return (
        <IconButton>
          <EditIcon />
        </IconButton>
      );
    },
  },
];

const rows = [
  {
    id: 1,
    fornecedor: "Rômulo",
    descricao: "descricao",
    vencimento: new Date(),
    estado: "RN",
  },
  {
    id: 2,
    fornecedor: "Júlio",
    descricao: "descricao",
    vencimento: new Date(),
    estado: "PB",
  },
  {
    id: 3,
    fornecedor: "Jardel",
    descricao: "descricao",
    vencimento: new Date(),
    estado: "BA",
  },
];

export default function Contratos() {
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);

  const [value, setValue] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [estado, setEstado] = useState("");

  const handleChange = event => {
    setEstado(event.target.value);
  };

  return (
    <Grid
      container
      alignItems="center"
      justifyContent="center"
      style={{ minHeight: "80vh", marginTop: "40px" }}
      spacing={2}
      direction="column"
    >
      <Typography sx={{ marginTop: "25px" }} variant="h5">
        Contratos
      </Typography>
      <Grid item>
        <Grid container justifyContent="space-between" spacing={0}>
          <Grid xs={6} item>
            <Grid container spacing={0}>
              <Grid xs={4} item>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    disableFuture
                    label="Data criação"
                    openTo="year"
                    views={["year", "month", "day"]}
                    value={currentDate}
                    onChange={newValue => {
                      setValue(newValue);
                    }}
                    renderInput={params => <TextField {...params} />}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid xs={5} item>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    label="Vencimento"
                    value={value}
                    onChange={newValue => {
                      setValue(newValue);
                    }}
                    renderInput={params => <TextField {...params} />}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid xs={3} item>
                <FormControl fullWidth>
                  <InputLabel id="demo-simple-select-label">Estado</InputLabel>
                  <Select
                    labelId="demo-simple-select-label"
                    id="demo-simple-select"
                    value={estado}
                    label="Estado"
                    onChange={handleChange}
                  >
                    <MenuItem value={10}>RN</MenuItem>
                    <MenuItem value={20}>PB</MenuItem>
                    <MenuItem value={30}>BA</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Grid>

          <Grid xs={2} item>
            <IconButton onClick={handleOpen} size="large">
              <AddCircleOutlineIcon fontSize="large" />
            </IconButton>
          </Grid>
        </Grid>

        <Paper
          sx={{
            height: 400,
            width: "750px",
          }}
          elevation={2}
        >
          <DataGrid
            rows={rows}
            columns={columns}
            pageSize={5}
            rowsPerPageOptions={[5]}
            checkboxSelection
            disableSelectionOnClick
          />
        </Paper>
      </Grid>
    </Grid>
  );
}
import React, { useState } from "react";
import Header from "../../components/Header";

import { makeStyles, useTheme } from "@material-ui/core/styles";
import useMediaQuery from "@material-ui/core/useMediaQuery";
import Drawer from "@material-ui/core/Drawer";
import CssBaseline from "@material-ui/core/CssBaseline";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import IconButton from "@material-ui/core/IconButton";
import List from "@material-ui/core/List";
import Typography from "@material-ui/core/Typography";
import Divider from "@material-ui/core/Divider";
import ListItem from "@material-ui/core/ListItem";

import ListItemText from "@material-ui/core/ListItemText";

import MenuIcon from "@material-ui/icons/Menu";
import Fornecedores from "../../components/Fornecedores";
import Contratos from "../../components/Contratos";

const drawerWidth = 200;

const useStyles = makeStyles(theme => ({
  // root: {
  //   display: "flex",
  // },
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
    background: "#003399",
  },
  drawer: {
    flexShrink: 0,
    width: drawerWidth,
  },
  drawerPaper: {
    width: drawerWidth,
  },
  menuButton: {
    marginTop: "70px",
    marginLeft: "14px",
    marginRight: theme.spacing(2),
    [theme.breakpoints.up("md")]: {
      display: "none",
    },
  },
  toolbar: {
    ...theme.mixins.toolbar,
    [theme.breakpoints.down("sm")]: {
      display: "none",
    },
  },
  content: {
    flexGrow: 1,
    backgroundColor: theme.palette.background.default,
    padding: theme.spacing(3),
  },
}));

export default function GestaoDeContratos() {
  const classes = useStyles();
  const theme = useTheme();
  const isMdUp = useMediaQuery(theme.breakpoints.up("md"));
  const [comp, setComp] = useState("");
  const [open, setOpen] = useState(false);

  const toggleDrawer = event => {
    if (event.type === "keydown" && (event.key === "Tab" || event.key === "Shift")) {
      return;
    }

    setOpen(!open);
  };

  return (
    <>
      <div className={classes.root}>
        <CssBaseline />

        <AppBar position="fixed" className={classes.appBar}>
          <Header />
        </AppBar>

        <IconButton
          color="inherit"
          aria-label="open drawer"
          edge="start"
          onClick={toggleDrawer}
          className={classes.menuButton}
        >
          <MenuIcon />
        </IconButton>
        {/* <AppBar position="fixed" className={classes.appBar}>
          <Toolbar>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              onClick={toggleDrawer}
              className={classes.menuButton}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" noWrap>
              Intranet
            </Typography>
          </Toolbar>
        </AppBar> */}
        <Drawer
          className={classes.drawer}
          variant={isMdUp ? "permanent" : "temporary"}
          classes={{
            paper: classes.drawerPaper,
          }}
          anchor="left"
          open={open}
          onClose={toggleDrawer}
        >
          <div className={classes.toolbar} />
          <Divider />
          <List>
            <ListItem button onClick={() => setComp("fr")}>
              <ListItemText primary="Fornecedores" />
            </ListItem>
            <ListItem
              button
              onClick={() => {
                setComp("ct");
              }}
            >
              <ListItemText primary="Contratos" />
            </ListItem>
            <ListItem button onClick={() => setComp("")}>
              <ListItemText primary="Faturamento" />
            </ListItem>
            <ListItem button onClick={() => {}}>
              <ListItemText primary="Convênios" />
            </ListItem>
          </List>
        </Drawer>
        <main className={classes.content}>
          {comp === "fr" ? <Fornecedores /> : comp === "ct" ? <Contratos /> : null}
        </main>
      </div>
    </>
  );
}
import React, { useState, useContext, useEffect } from "react";
import { useHistory } from "react-router-dom";
import { Popover } from "@material-ui/core";
import ExitToAppIcon from "@material-ui/icons/ExitToApp";

import useUser from "../../hooks/useUser";

import { Context as AuthContext } from "../../Context/AuthContext";
import { api } from "../../services/Api";

import LogoDNA from "../../assets/LogoDNA.png";

import "./styles.css";

export default function Header({ titulo }) {
  const usuario = useUser();
  const history = useHistory();

  const [userIconAnchor, setUserIconAnchor] = useState(null);
  const [preview, setPreview] = useState();

  const { logout } = useContext(AuthContext);

  useEffect(() => {
    async function chamaFuncao() {
      try {
        const resultImage = await api.get("/v2/controleAcesso/avatar", {
          params: { username: usuario },
          responseType: "blob",
        });

        if (resultImage.status !== 202) {
          setPreview(URL.createObjectURL(resultImage.data));
        }
      } catch (error) {
        console.log(error);
      }
    }
    chamaFuncao();
    // eslint-disable-next-line
  }, []);

  return (
    <header>
      <div className="cabecalho">
        <div style={{ display: "flex", alignItems: "center" }}>
          <div
            onClick={() => history.push("/home")}
            id="logo"
            className="cabecalho-icones"
          >
            <img className="imgLogo" src={LogoDNA} alt="DNA Center" />
          </div>

          <div id="titulo">
            <span>{titulo}</span>
          </div>
        </div>

        <div className="cabecalho-icones">
          <div
            className="icone-usuario"
            onClick={e => setUserIconAnchor(e.currentTarget)}
          >
            {preview ? (
              <img className="imagem-usuario" src={preview} alt="icone do usuario" />
            ) : (
              usuario.charAt(0)
            )}
          </div>
        </div>

        <Popover
          open={Boolean(userIconAnchor)}
          anchorEl={userIconAnchor}
          onClose={() => setUserIconAnchor(null)}
          anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
        >
          <div className="acessos-header" onClick={() => history.push("/home")}>
            <span> Página inicial </span>
          </div>
          <div className="acessos-header" onClick={() => history.push("/perfil")}>
            <span> Perfil </span>
          </div>
          <div className="user-icon-row" onClick={() => logout()}>
            <p>Sair</p>
            <ExitToAppIcon />
          </div>
        </Popover>
      </div>
    </header>
  );
}
#icon-menu {
  color: #fff;
}

.cabecalho {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #003399;
  height: 70px;
}

.cabecalho-icones {
  display: flex;
  justify-content: space-between;
  align-items: center;

  margin: 0 15px;
}

.icone-usuario {
  margin-right: 5px;
  padding: 0.5rem;

  font-size: 1.4rem;
  color: white;
  font-weight: bold;

  background-color: #ed3237;

  border-radius: 100%;

  height: 40px;
  width: 40px;

  display: flex;
  justify-content: center;
  align-items: center;

  cursor: pointer;

  object-fit: cover;
}

.imagem-usuario {
  margin-right: 5px;
  padding: 0.5rem;

  font-size: 1.4rem;
  color: white;
  font-weight: bold;

  

  border-radius: 100%;

  height: 60px;
  width: 60px;

  display: flex;
  justify-content: center;
  align-items: center;

  cursor: pointer;

  object-fit: cover;
}

.imgLogo {
  width: 55px;
  height: 55px;
}

#logo {
  float: left;
  cursor: pointer;
}

#titulo {
  /* margin-left: 10px; */
  color: #fff;
}

#titulo span {
  font-size: 24px;
  font-weight: bold;
}

#usuario {
  margin-left: auto;
  margin-right: 20px;
}

.linkSair {
  color: #ffffff;
  text-decoration: none;
}

.linkSair:hover {
  color: yellow;
}

#iconSair {
  margin-right: 8px;
  font-size: 18px;
}

.apps-popover {
  padding: 0.5rem;

  display: grid;
  grid-template-columns: 1fr 1fr;
  row-gap: 10px;

  width: 270px;
}

.acessos-header {
  text-align: flex-start;
  margin-bottom: 5px;
  padding: 8px 0 8px 12px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.5s ease;
}

.acessos-header:hover {
  background-color: rgba(195, 191, 191, 0.3);
}

.user-icon-row {
  border-top: 1px solid #d3d3d3;
  display: flex;
  justify-content: space-between;
  align-items: center;

  width: 200px;

  padding: 0.75rem;

  cursor: pointer;
}

.user-icon-row:hover {
  background-color: rgba(195, 191, 191, 0.3);
}

.user-icon-row > p {
  font-size: 1rem;
  color: rgba(0, 0, 0, 0.8);
  font-weight: 500;
}

@media (max-width: 449px) {
  * {
    padding: 0px;
    margin: 0px;
  }

  #usuario {
    display: flex;
    flex-direction: column;
    margin-left: 30px;
    margin-right: 4px;
  }

  #usuario p {
    font-size: 12px;
  }

  #titulo span {
    font-size: 18px;
    font-weight: bold;
  }

  #iconSair {
    margin-right: 8px;
    font-size: 14px;
  }
}

@media (min-width: 600px) {
  .apps-popover {
    width: 340px;
    grid-template-columns: 1fr 1fr 1fr;
  }
}
